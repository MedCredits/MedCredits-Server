<testsuites name="jest tests" tests="39" failures="0" time="3.177">
  <testsuite name="ABIHelper" errors="0" failures="0" skipped="2" timestamp="2018-08-30T20:20:00" time="1.026" tests="2">
    <testcase classname="ABIHelper lookup should lookup correctly" name="ABIHelper lookup should lookup correctly" time="0.001">
      <skipped/>
    </testcase>
    <testcase classname="ABIHelper topic0 should hash correctly" name="ABIHelper topic0 should hash correctly" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="displayWeiToUsd" errors="0" failures="0" skipped="1" timestamp="2018-08-30T20:20:00" time="1.023" tests="1">
    <testcase classname="displayWeiToUsd Will comma and round decimals" name="displayWeiToUsd Will comma and round decimals" time="0.001">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="CallCountRegistry" errors="0" failures="0" skipped="2" timestamp="2018-08-30T20:20:00" time="1.013" tests="2">
    <testcase classname="CallCountRegistry register() should increment the call on register" name="CallCountRegistry register() should increment the call on register" time="0">
      <skipped/>
    </testcase>
    <testcase classname="CallCountRegistry deregister should decrement the count" name="CallCountRegistry deregister should decrement the count" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="blockSagas" errors="0" failures="0" skipped="1" timestamp="2018-08-30T20:20:00" time="1.142" tests="1">
    <testcase classname="blockSagas latestBlock() should correctly invalidate all of the addresses discovered" name="blockSagas latestBlock() should correctly invalidate all of the addresses discovered" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Saga Genesis Integration Test" errors="0" failures="0" skipped="1" timestamp="2018-08-30T20:20:00" time="1.277" tests="1">
    <testcase classname="Saga Genesis Integration Test Saga lifecycle Saga lifecycle should work" name="Saga Genesis Integration Test Saga lifecycle Saga lifecycle should work" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="nextAvailableDoctor reducer" errors="0" failures="0" skipped="5" timestamp="2018-08-30T20:20:01" time="0.156" tests="5">
    <testcase classname="nextAvailableDoctor reducer init" name="nextAvailableDoctor reducer init" time="0">
      <skipped/>
    </testcase>
    <testcase classname="nextAvailableDoctor reducer FIND_NEXT_AVAILABLE_DOCTOR" name="nextAvailableDoctor reducer FIND_NEXT_AVAILABLE_DOCTOR" time="0">
      <skipped/>
    </testcase>
    <testcase classname="nextAvailableDoctor reducer NEXT_AVAILABLE_DOCTOR" name="nextAvailableDoctor reducer NEXT_AVAILABLE_DOCTOR" time="0">
      <skipped/>
    </testcase>
    <testcase classname="nextAvailableDoctor reducer EXCLUDED_DOCTORS" name="nextAvailableDoctor reducer EXCLUDED_DOCTORS" time="0">
      <skipped/>
    </testcase>
    <testcase classname="nextAvailableDoctor reducer PATIENT_INFO" name="nextAvailableDoctor reducer PATIENT_INFO" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="buildAccount()" errors="0" failures="0" skipped="1" timestamp="2018-08-30T20:20:01" time="0.163" tests="1">
    <testcase classname="buildAccount() should accept any case in the secret key" name="buildAccount() should accept any case in the secret key" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Account" errors="0" failures="0" skipped="2" timestamp="2018-08-30T20:20:00" time="1.595" tests="2">
    <testcase classname="Account account.secretKeyWithSaltAsync()" name="Account account.secretKeyWithSaltAsync()" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Account account.secretKey()" name="Account account.secretKey()" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="3" timestamp="2018-08-30T20:20:01" time="0.148" tests="3">
    <testcase classname=" master passwords cannot be empty" name=" master passwords cannot be empty" time="0">
      <skipped/>
    </testcase>
    <testcase classname=" master password must conform to length" name=" master password must conform to length" time="0">
      <skipped/>
    </testcase>
    <testcase classname=" master password is valid for good passwords" name=" master password is valid for good passwords" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="1" timestamp="2018-08-30T20:20:01" time="0.156" tests="1">
    <testcase classname=" Can encrypt and decrypt" name=" Can encrypt and decrypt" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="1" timestamp="2018-08-30T20:20:02" time="0.176" tests="1">
    <testcase classname=" Returns a hex string if input is hex or array buffer" name=" Returns a hex string if input is hex or array buffer" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="CallCountRegistry" errors="0" failures="0" skipped="6" timestamp="2018-08-30T20:20:02" time="0.147" tests="6">
    <testcase classname="CallCountRegistry onError() should call onError when an error occurs" name="CallCountRegistry onError() should call onError when an error occurs" time="0">
      <skipped/>
    </testcase>
    <testcase classname="CallCountRegistry onTxHash() should call onTxHash when a transaction hash is available" name="CallCountRegistry onTxHash() should call onTxHash when a transaction hash is available" time="0">
      <skipped/>
    </testcase>
    <testcase classname="CallCountRegistry onTxHash() should allow taking null" name="CallCountRegistry onTxHash() should allow taking null" time="0">
      <skipped/>
    </testcase>
    <testcase classname="CallCountRegistry onReceipt() should call onReceipt when a receipt is available" name="CallCountRegistry onReceipt() should call onReceipt when a receipt is available" time="0.001">
      <skipped/>
    </testcase>
    <testcase classname="CallCountRegistry onReceipt() should allow taking null" name="CallCountRegistry onReceipt() should allow taking null" time="0">
      <skipped/>
    </testcase>
    <testcase classname="CallCountRegistry chaining() should support chaining" name="CallCountRegistry chaining() should support chaining" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="1" timestamp="2018-08-30T20:20:01" time="0.711" tests="1">
    <testcase classname=" Can encrypt and decrypt" name=" Can encrypt and decrypt" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="4" timestamp="2018-08-30T20:20:02" time="0.158" tests="4">
    <testcase classname=" secret keys cannot be empty" name=" secret keys cannot be empty" time="0">
      <skipped/>
    </testcase>
    <testcase classname=" secret key must conform to length" name=" secret key must conform to length" time="0">
      <skipped/>
    </testcase>
    <testcase classname=" secret key works for a valid 64 character base 36 number" name=" secret key works for a valid 64 character base 36 number" time="0">
      <skipped/>
    </testcase>
    <testcase classname=" secret key fails for an invalid 64 character string" name=" secret key fails for an invalid 64 character string" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="1" timestamp="2018-08-30T20:20:02" time="0.134" tests="1">
    <testcase classname=" Can encrypt and decrypt" name=" Can encrypt and decrypt" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="caseStale" errors="0" failures="0" skipped="0" timestamp="2018-08-30T20:20:02" time="0.494" tests="6">
    <testcase classname="caseStale as doctor is accurate when enough time has passed as a Doctor waiting on a patient" name="caseStale as doctor is accurate when enough time has passed as a Doctor waiting on a patient" time="0.005">
    </testcase>
    <testcase classname="caseStale as doctor is false when not enough time has passed as a Doctor waiting on a Patient" name="caseStale as doctor is false when not enough time has passed as a Doctor waiting on a Patient" time="0">
    </testcase>
    <testcase classname="caseStale as doctor is false when in Challenging state and not enough time has passed as a Doctor waiting on a Patient" name="caseStale as doctor is false when in Challenging state and not enough time has passed as a Doctor waiting on a Patient" time="0.001">
    </testcase>
    <testcase classname="caseStale as patient is accurate when enough time has passed as a Patient waiting on a Doctor" name="caseStale as patient is accurate when enough time has passed as a Patient waiting on a Doctor" time="0.001">
    </testcase>
    <testcase classname="caseStale returns false when compareTime or status is undefined" name="caseStale returns false when compareTime or status is undefined" time="0">
    </testcase>
    <testcase classname="caseStale returns false when not a status we care about" name="caseStale returns false when not a status we care about" time="0">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="1" timestamp="2018-08-30T20:20:02" time="0.146" tests="1">
    <testcase classname=" Can encrypt and decrypt" name=" Can encrypt and decrypt" time="0">
      <skipped/>
    </testcase>
  </testsuite>
</testsuites>